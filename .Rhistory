summarize(goals = n()) %>%
arrange(desc(goals))
levels(top_goalscorers$bodypart) <- c('Right Foot', 'Left Foot', 'Header')
top_goalscorers <- top_goalscorers[with(top_goalscorers, order(bodypart, -goals)), ] # Sort by method and team
top_goalscorers_method <- by(top_goalscorers, top_goalscorers$bodypart, function(X) X[1:5, ])
top_goalscorers <- do.call("rbind", top_goalscorers_method) # Get top 5 teams in each category
top_goalscorers
ggplot(top_goalscorers, aes(x = event_team, y = goals, fill = bodypart)) +
geom_bar(stat = "identity", width = 0.6, color = "black") +
labs(title = "Methods of top goal-scoring teams",
x = "Team", y = "Total Goals") +
geom_text(aes(label = goals), vjust = -0.5, size = 3, color = "black") +
theme(plot.title = element_text(size = 17, hjust = -0.7),
legend.position = "bottom") +
facet_wrap(~ bodypart, scales = "free") +
ylim(0, max(top_goalscorers$goals)) +
coord_flip()
library(viridis)
#Scored in less than 15 minutes
first_15 <- events[events$time <= 15, ]
## Scored in the last 15 minutes
last_15 <- events[events$time >= 75 & events$time <= 90, ]
## Grouping by teams
top_10_scorer_first_15 <- first_15[first_15$is_goal == 1, ] %>%
group_by(event_team) %>%
summarize(goals = n()) %>%
arrange(desc(goals)) %>%
top_n(10)
teams <- top_10_scorer_first_15$event_team
scores <- top_10_scorer_first_15$goals
## Plotting
ggplot(top_10_scorer_first_15, aes(x = reorder(event_team, goals), y = goals, fill = goals)) +
geom_bar(stat = "identity", width = 0.5) +
scale_fill_viridis(option = "A", direction = -1) +
labs(x = "Teams", y = "# of goals", title = "Most goals in the 1st 15 minutes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = "none") +
coord_flip()
#----------------------------------------------------------------------------------------------------------------
## Grouping by teams
top_10_scorer_last_15 <- last_15[last_15$is_goal == 1, ] %>%
group_by(event_team) %>%
summarize(goals = n()) %>%
arrange(desc(goals)) %>%
top_n(10)
teams_last_15 <- top_10_scorer_last_15$event_team
scores_last_15 <- top_10_scorer_last_15$goals
## Plotting
ggplot(top_10_scorer_last_15, aes(x = reorder(event_team, goals), y = goals, fill = goals)) +
geom_bar(stat = "identity", width = 0.5) +
scale_fill_viridis(option = "A", direction = -1) +
labs(x = "Teams", y = "Number of goals", title = "Most goals in the last 15 minutes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = "none") +
coord_flip()
team_goals <- events %>%
group_by(event_team) %>%
summarize(goals = sum(is_goal == TRUE))
team_cards <- events %>%
filter(event_type %in% c(4, 5, 6)) %>%
group_by(event_team) %>%
summarize(cards = n())
team_post_hits <- events %>%
filter(shot_outcome == 4) %>%
group_by(event_team) %>%
summarize(post_hits = n()) %>%
ungroup() %>%
right_join(distinct(events, event_team), by = "event_team") %>%
mutate(post_hits = replace_na(post_hits, 0))
team_goal_method <- events %>%
filter(is_goal == 1) %>%
group_by(event_team, bodypart) %>%
summarize(method_goals = n()) %>%
spread(bodypart, method_goals, fill = 0) %>%
ungroup() %>% select(-last_col())
team_goal_method <- events %>%
filter(is_goal == 1) %>%
group_by(event_team, bodypart) %>%
summarize(method_goals = n()) %>%
spread(bodypart, method_goals, fill = 0) %>%
ungroup()
team_goal_method <- events %>%
filter(is_goal == 1) %>%
group_by(event_team, bodypart) %>%
summarize(method_goals = n()) %>%
spread(bodypart, method_goals, fill = 0) %>%
ungroup() %>% select(-last_col())
team_goals <- events %>%
group_by(event_team) %>%
summarize(goals = sum(is_goal == TRUE))
team_cards <- events %>%
filter(event_type %in% c(4, 5, 6)) %>%
group_by(event_team) %>%
summarize(cards = n())
team_post_hits <- events %>%
filter(shot_outcome == 4) %>%
group_by(event_team) %>%
summarize(post_hits = n()) %>%
ungroup() %>%
right_join(distinct(events, event_team), by = "event_team") %>%
mutate(post_hits = replace_na(post_hits, 0))
team_goal_method <- events %>%
filter(is_goal == 1) %>%
group_by(event_team, bodypart) %>%
summarize(method_goals = n()) %>%
spread(bodypart, method_goals, fill = 0) %>%
ungroup()
team_goal_time_first15 <- events %>%
filter(is_goal == 1, events$time <= 15) %>%
group_by(event_team) %>%
summarize(total_goals = n()) %>%
ungroup()
team_goal_time_last15 <- events %>%
filter(time >= 75 & time <= 90) %>%
group_by(event_team) %>%
summarize(total_goals = sum(is_goal == 1)) %>%
ungroup() %>%
right_join(distinct(events, event_team), by = "event_team") %>%
mutate(total_goals = replace_na(total_goals, 0))
full_data <- data.frame(
team_goals$goals,
team_cards$cards,
team_post_hits$post_hits,
as.matrix(team_goal_method[, -1]),  # Exclude the event_team column
team_goal_time_first15$total_goals,
team_goal_time_last15$total_goals
)
# Calculate the distance matrix
distance_matrix <- dist(full_data)
# Perform hierarchical clustering with complete, average, and single linkages
hierarchical_complete <- hclust(distance_matrix, method = "complete")
hierarchical_single <- hclust(distance_matrix, method = "single")
# Determine the number of clusters (e.g., 3 clusters)
num_clusters <- 3
# Perform clustering for each linkage method
clusters_complete <- cutree(hierarchical_complete, k = num_clusters)
clusters_single <- cutree(hierarchical_single, k = num_clusters)
# Create cluster tables for each linkage method
cluster_table_complete <- data.frame(event_team = team_goals$event_team, cluster = clusters_complete)
cluster_table_single <- data.frame(event_team = team_goals$event_team, cluster = clusters_single)
# Set the team names as labels for the dendrogram
labels <- team_goals$event_team
# Create a layout for the plots
par(mfrow = c(1, 3))
# Plot dendrogram with complete linkage
plot(hierarchical_complete, main = "Complete Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
rect.hclust(hierarchical_complete, k = num_clusters, border = num_clusters:1)
# Plot dendrogram with single linkage
plot(hierarchical_single, main = "Single Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
rect.hclust(hierarchical_single, k = num_clusters, border = num_clusters:1)
# Display the cluster tables for each linkage method
print(cluster_table_complete)
print(cluster_table_single)
# Calculate the distance matrix
distance_matrix <- dist(full_data)
# Perform hierarchical clustering with complete, average, and single linkages
hierarchical_complete <- hclust(distance_matrix, method = "complete")
hierarchical_single <- hclust(distance_matrix, method = "single")
# Determine the number of clusters (e.g., 3 clusters)
num_clusters <- 3
# Perform clustering for each linkage method
clusters_complete <- cutree(hierarchical_complete, k = num_clusters)
clusters_single <- cutree(hierarchical_single, k = num_clusters)
# Create cluster tables for each linkage method
cluster_table_complete <- data.frame(event_team = team_goals$event_team, cluster = clusters_complete)
cluster_table_single <- data.frame(event_team = team_goals$event_team, cluster = clusters_single)
# Set the team names as labels for the dendrogram
labels <- team_goals$event_team
# Create a layout for the plots
par(mfrow = c(1, 3))
# Plot dendrogram with complete linkage
plot(hierarchical_complete, main = "Complete Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
# Plot dendrogram with single linkage
plot(hierarchical_single, main = "Single Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
# Plot dendrogram with complete linkage
plot(hierarchical_complete, main = "Complete Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
rect.hclust(hierarchical_complete, k = num_clusters, border = num_clusters:1)
# Plot dendrogram with complete linkage
plot(hierarchical_complete, main = "Complete Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
rect.hclust(hierarchical_complete, k = num_clusters, border = num_clusters:1)
# Plot dendrogram with complete linkage
plot(hierarchical_complete, main = "Complete Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
rect.hclust(hierarchical_complete, k = num_clusters, border = num_clusters:1)
# Calculate the distance matrix
distance_matrix <- dist(full_data)
# Perform hierarchical clustering with complete, average, and single linkages
hierarchical_complete <- hclust(distance_matrix, method = "complete")
hierarchical_single <- hclust(distance_matrix, method = "single")
# Determine the number of clusters (e.g., 3 clusters)
num_clusters <- 3
# Perform clustering for each linkage method
clusters_complete <- cutree(hierarchical_complete, k = num_clusters)
clusters_single <- cutree(hierarchical_single, k = num_clusters)
# Create cluster tables for each linkage method
cluster_table_complete <- data.frame(event_team = team_goals$event_team, cluster = clusters_complete)
cluster_table_single <- data.frame(event_team = team_goals$event_team, cluster = clusters_single)
# Set the team names as labels for the dendrogram
labels <- team_goals$event_team
# Create a layout for the plots
par(mfrow = c(1, 3))
# Plot dendrogram with complete linkage
plot(hierarchical_complete, main = "Complete Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
rect.hclust(hierarchical_complete, k = num_clusters, border = num_clusters:1)
# Calculate the distance matrix
distance_matrix <- dist(full_data)
# Perform hierarchical clustering with complete, average, and single linkages
hierarchical_complete <- hclust(distance_matrix, method = "complete")
hierarchical_single <- hclust(distance_matrix, method = "single")
# Determine the number of clusters (e.g., 3 clusters)
num_clusters <- 3
# Perform clustering for each linkage method
clusters_complete <- cutree(hierarchical_complete, k = num_clusters)
clusters_single <- cutree(hierarchical_single, k = num_clusters)
# Create cluster tables for each linkage method
cluster_table_complete <- data.frame(event_team = team_goals$event_team, cluster = clusters_complete)
cluster_table_single <- data.frame(event_team = team_goals$event_team, cluster = clusters_single)
# Set the team names as labels for the dendrogram
labels <- team_goals$event_team
# Create a layout for the plots
par(mfrow = c(1, 3))
# Plot dendrogram with complete linkage
plot(hierarchical_complete, main = "Complete Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
rect.hclust(hierarchical_complete, k = num_clusters, border = num_clusters:1)
# Plot dendrogram with single linkage
plot(hierarchical_single, main = "Single Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
rect.hclust(hierarchical_single, k = num_clusters, border = num_clusters:1)
# Display the cluster tables for each linkage method
print(cluster_table_complete)
print(cluster_table_single)
# Plot dendrogram with single linkage
plot(hierarchical_single, main = "Single Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
rect.hclust(hierarchical_single, k = num_clusters, border = num_clusters:1)
# Plot dendrogram with single linkage
plot(hierarchical_single, main = "Single Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
rect.hclust(hierarchical_single, k = num_clusters, border = num_clusters:1)
print(cluster_table_single)
# Plot dendrogram with single linkage
plot(hierarchical_single, main = "Single Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
rect.hclust(hierarchical_single, k = num_clusters, border = num_clusters:1)
plot(hierarchical_single, main = "Single Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
rect.hclust(hierar
plot(hierarchical_single, main = "Single Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
# Plot dendrogram with complete linkage
plot(hierarchical_complete, main = "Complete Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
rect.hclust(hierarchica
# Plot dendrogram with complete linkage
plot(hierarchical_complete, main = "Complete Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
# Calculate the distance matrix
distance_matrix <- dist(full_data)
# Perform hierarchical clustering with complete, average, and single linkages
hierarchical_complete <- hclust(distance_matrix, method = "complete")
hierarchical_single <- hclust(distance_matrix, method = "single")
# Determine the number of clusters (e.g., 3 clusters)
num_clusters <- 3
# Perform clustering for each linkage method
clusters_complete <- cutree(hierarchical_complete, k = num_clusters)
clusters_single <- cutree(hierarchical_single, k = num_clusters)
# Create cluster tables for each linkage method
cluster_table_complete <- data.frame(event_team = team_goals$event_team, cluster = clusters_complete)
cluster_table_single <- data.frame(event_team = team_goals$event_team, cluster = clusters_single)
# Set the team names as labels for the dendrogram
labels <- team_goals$event_team
# Create a layout for the plots
par(mfrow = c(1, 3))
plot(hierarchical_complete, main = "Complete Linkage", xlab = "Teams", ylab = "Distance", labels = labels, hang = -1, cex = 0.8)
rect.hclust(hierarchical_complete, k = num_clusters, border = num_clusters:1)
# Convert the columns to numeric
events[, 17] <- as.numeric(events[, 17])
events[, 26:74] <- sapply(events[, 26:74], as.numeric)
# Loading the events.csv file
events <- read.csv("events.csv")
# Loading the ginf.csv file
ginf<- read.csv("ginf.csv")
str(events)
gc()
gc()
gc()
events<- left_join(events, ginf[,c('id_odsp','league','season','country')], by = "id_odsp")
gc()
gc()
#The purpose of these conversions is to ensure that the variables are correctly identified as categorical variables when performing analysis or plotting. Factors provide a convenient way to handle categorical data in R, allowing for easier manipulation, summary statistics, and visualization.
events$assist_method <- as.factor(events$assist_method)
events$id_odsp <- as.factor(events$id_odsp)
events$league <- as.factor(events$league)
ginf$league <- as.factor(ginf$league)
ginf$season <- as.factor(ginf$season)
events$is_goal <- as.logical(events$is_goal)
events$is_goal <- as.factor(events$is_goal)
events$bodypart <- as.factor(events$bodypart)
levels(events$league) <- c('Bundesliga','Premier League','Ligue 1','Serie A','La Liga')
levels(ginf$league) <- c('Bundesliga','Premier League','Ligue 1','Serie A','La Liga')
str(events)
# Create new columns based on event_type
events$Attempt <- ifelse(events$event_type == 1, 1, 0)
events$Corner <- ifelse(events$event_type == 2, 1, 0)
events$Foul <- ifelse(events$event_type == 3, 1, 0)
events$Yellow_Card <- ifelse(events$event_type == 4, 1, 0)
events$Second_Yellow <- ifelse(events$event_type == 5, 1, 0)
events$Red_Card <- ifelse(events$event_type == 6, 1, 0)
events$Substitution <- ifelse(events$event_type == 7, 1, 0)
events$Free_Kick_Won <- ifelse(events$event_type == 8, 1, 0)
events$Offside <- ifelse(events$event_type == 9, 1,0)
events$Hand_Ball <- ifelse(events$event_type == 10, 1, 0)
events$Penalty_Conceded <- ifelse(events$event_type == 11, 1, 0)
# Create new columns based on event_type2
events$Key_Pass <- ifelse(events$event_type2 == 12, 1, 0)
events$Failed_Through_Ball <- ifelse(events$event_type2 == 13, 1, 0)
events$Sending_Off <- ifelse(events$event_type2 == 14, 1, 0)
events$Own_Goal <- ifelse(events$event_type2 == 15, 1, 0)
# View the updated table
print(events)
# Replace NA values in event_type2 column with 0
events$event_type2 <- ifelse(is.na(events$event_type2), 0, events$event_type2)
# Replace NA values in event_type2 column with 0
events$event_type2[is.na(events$event_type2)] <- 0
# View the updated table
print(events)
# View the updated table
print(events)
# Create new columns based on event_type
events$Attacking_Half <- ifelse(events$location == 1, 1, 0)
events$Defensive_Half <- ifelse(events$location == 2, 1, 0)
events$Centre_box <- ifelse(events$location == 3, 1, 0)
events$Left_wing <- ifelse(events$location == 4, 1, 0)
events$Right_wing <- ifelse(events$location == 5, 1, 0)
events$Difficult_angle_LongRange <- ifelse(events$location == 6, 1, 0)
events$Difficult_angle_Left <- ifelse(events$location == 7, 1, 0)
events$Difficult_angle_Right <- ifelse(events$location == 8, 1, 0)
events$Left_box <- ifelse(events$location == 9, 1, 0)
events$Left_box6Yard <- ifelse(events$location == 10, 1,0)
events$Right_box <- ifelse(events$location == 11, 1, 0)
events$Right_box6Yard <- ifelse(events$location == 12, 1, 0)
events$Close_range <- ifelse(events$location == 13, 1, 0)
events$Penalty_spot <- ifelse(events$location == 14, 1,0)
events$Outside_box <- ifelse(events$location == 15, 1, 0)
events$Long_range <- ifelse(events$location == 16, 1, 0)
events$Over_35yards <- ifelse(events$location == 17, 1, 0)
events$Over_40yards <- ifelse(events$location == 18, 1,0)
events$Not_recorded <- ifelse(events$location == 19, 1, 0)
# Replace NA values in event_type2 column with 0
events$location <- ifelse(is.na(events$location), 0, events$location)
# Replace NA values in event_type2 column with 0
events$location[is.na(events$location)] <- 0
# Replace NA values in event_type2 column with 0
events$location <- ifelse(is.na(events$location), 0, events$location)
# Replace NA values in event_type2 column with 0
events$location[is.na(events$location)] <- 0
events$Home <- ifelse(events$side == 1, 1, 0)
events$Away <- ifelse(events$side == 2, 1, 0)
# Replace NA values in event_type2 column with 0
events$side <- ifelse(is.na(events$side), 0, events$side)
# Replace NA values in event_type2 column with 0
events$side[is.na(events$side)] <- 0
events$Too_high <- ifelse(events$shot_place == 1, 1, 0)
events$Blocked <- ifelse(events$shot_place == 2, 1, 0)
events$Bottom_left_corner <- ifelse(events$shot_place == 3, 1, 0)
events$Bottom_right_corner <- ifelse(events$shot_place == 4, 1, 0)
events$Centre <- ifelse(events$shot_place == 5, 1, 0)
events$High_and_wide <- ifelse(events$shot_place == 6, 1, 0)
events$Bar <- ifelse(events$shot_place == 7, 1, 0)
events$Miss_to_left <- ifelse(events$shot_place == 8, 1, 0)
events$Miss_to_right <- ifelse(events$shot_place == 9, 1, 0)
events$Too_high <- ifelse(events$shot_place == 10, 1,0)
events$Top_centre <- ifelse(events$shot_place == 11, 1, 0)
events$Top_left_corner <- ifelse(events$shot_place == 12, 1, 0)
events$Top_right_corner <- ifelse(events$shot_place == 13, 1, 0)
# Replace NA values in event_type2 column with 0
events$shot_place <- ifelse(is.na(events$shot_place), 0, events$shot_place)
# Replace NA values in event_type2 column with 0
events$shot_place[is.na(events$shot_place)] <- 0
events$On_target <- ifelse(events$shot_outcome == 1, 1, 0)
events$Off_target <- ifelse(events$shot_outcome == 2, 1, 0)
events$Blocked <- ifelse(events$shot_outcome == 3, 1, 0)
events$Bar <- ifelse(events$shot_outcome == 4, 1, 0)
# Replace NA values in event_type2 column with 0
events$shot_outcome <- ifelse(is.na(events$shot_outcome), 0, events$shot_outcome)
# Replace NA values in event_type2 column with 0
events$shot_outcome[is.na(events$shot_outcome)] <- 0
library(dplyr)
#Duplicated just in case
dupe_events <- events
dupe_events2 <- dupe_events
events$Long_range <- NULL
# Verify the changes
str(events)
events$Attempt <- as.factor(events$Attempt)
events$Corner <- as.factor(events$Corner)
events$Foul <- as.factor(events$Foul)
events$Yellow_Card <- as.factor(events$Yellow_Card)
events$Second_Yellow <- as.factor(events$Second_Yellow)
events$Red_Card <- as.factor(events$Red_Card)
events$Substitution <- as.factor(events$Substitution)
events$Free_Kick_Won <- as.factor(events$Free_Kick_Won)
events$Offside <- as.factor(events$Offside)
events$Hand_Ball <- as.factor(events$Hand_Ball)
events$Penalty_Conceded <- as.factor(events$Penalty_Conceded)
events$Key_Pass <- as.factor(events$Key_Pass)
events$Failed_Through_Ball <- as.factor(events$Failed_Through_Ball)
events$Sending_Off <- as.factor(events$Sending_Off)
events$Own_Goal <- as.factor(events$Own_Goal)
events$Attacking_Half <- as.factor(events$Attacking_Half)
events$Defensive_Half <- as.factor(events$Defensive_Half)
events$Centre_box <- as.factor(events$Centre_box)
events$Left_wing <- as.factor(events$Left_wing)
events$Right_wing <- as.factor(events$Right_wing)
events$Difficult_angle_LongRange <- as.factor(events$Difficult_angle_LongRange)
events$Difficult_angle_Left <- as.factor(events$Difficult_angle_Left)
events$Difficult_angle_Right <- as.factor(events$Difficult_angle_Right)
events$Left_box <- as.factor(events$Left_box)
events$Left_box6Yard <- as.factor(events$Left_box6Yard)
events$Right_box <- as.factor(events$Right_box)
events$Right_box6Yard <- as.factor(events$Right_box6Yard)
events$Close_range <- as.factor(events$Close_range)
events$Penalty_spot <- as.factor(events$Penalty_spot)
events$Outside_box <- as.factor(events$Outside_box)
events$Over_35yards <- as.factor(events$Over_35yards)
events$Over_40yards <- as.factor(events$Over_40yards)
events$Not_recorded <- as.factor(events$Not_recorded)
events$Home <- as.factor(events$Home)
events$Away <- as.factor(events$Away)
events$Too_high <- as.factor(events$Too_high)
events$Blocked <- as.factor(events$Blocked)
events$Bottom_left_corner <- as.factor(events$Bottom_left_corner)
events$Bottom_right_corner <- as.factor(events$Bottom_right_corner)
events$Centre <- as.factor(events$Centre)
events$High_and_wide <- as.factor(events$High_and_wide)
events$Bar <- as.factor(events$Bar)
events$Miss_to_left <- as.factor(events$Miss_to_left)
events$Miss_to_right <- as.factor(events$Miss_to_right)
events$Top_centre <- as.factor(events$Top_centre)
events$Top_left_corner <- as.factor(events$Top_left_corner)
events$Top_right_corner <- as.factor(events$Top_right_corner)
events$On_target <- as.factor(events$On_target)
events$Off_target <- as.factor(events$Off_target)
events$is_goal <- as.factor(events$is_goal)
# Replace NA values in event_type2 column with 0
events$event_type2 <- ifelse(is.na(events$event_type2), 0, events$event_type2)
# Replace NA values in event_type2 column with 0
events$event_type2[is.na(events$event_type2)] <- 0
# View the updated table
print(events)
# Replace NA values in event_type2 column with 0
events$event_type2 <- ifelse(is.na(events$event_type2), 0, events$event_type2)
# Replace NA values in event_type2 column with 0
events$event_type2[is.na(events$event_type2)] <- 0
# Replace NA values in event_type2 column with 0
events$location <- ifelse(is.na(events$location), 0, events$location)
# Replace NA values in event_type2 column with 0
events$location[is.na(events$location)] <- 0
# Replace NA values in event_type2 column with 0
events$side <- ifelse(is.na(events$side), 0, events$side)
# Replace NA values in event_type2 column with 0
events$side[is.na(events$side)] <- 0
# Replace NA values in event_type2 column with 0
events$shot_place <- ifelse(is.na(events$shot_place), 0, events$shot_place)
# Replace NA values in event_type2 column with 0
events$shot_place[is.na(events$shot_place)] <- 0
# Replace NA values in event_type2 column with 0
events$shot_outcome <- ifelse(is.na(events$shot_outcome), 0, events$shot_outcome)
# Replace NA values in event_type2 column with 0
events$shot_outcome[is.na(events$shot_outcome)] <- 0
# Verify the changes
str(events)
# Replace NA values in event_type2 column with 0
events$event_type2 <- ifelse(is.na(events$event_type2), 0, events$event_type2)
# Replace NA values in event_type2 column with 0
events$event_type2[is.na(events$event_type2)] <- 0
# Replace NA values in event_type2 column with 0
events$event_type2 <- ifelse(is.na(events$event_type2), 0, events$event_type2)
# Replace NA values in event_type2 column with 0
events$event_type2[is.na(events$event_type2)] <- 0
# Replace NA values in event_type2 column with 0
events$location <- ifelse(is.na(events$location), 0, events$location)
# Replace NA values in event_type2 column with 0
events$location[is.na(events$location)] <- 0
# Replace NA values in event_type2 column with 0
events$side <- ifelse(is.na(events$side), 0, events$side)
# Replace NA values in event_type2 column with 0
events$side[is.na(events$side)] <- 0
# Replace NA values in event_type2 column with 0
events$shot_place <- ifelse(is.na(events$shot_place), 0, events$shot_place)
# Replace NA values in event_type2 column with 0
events$shot_place[is.na(events$shot_place)] <- 0
# Replace NA values in event_type2 column with 0
events$shot_outcome <- ifelse(is.na(events$shot_outcome), 0, events$shot_outcome)
# Replace NA values in event_type2 column with 0
events$shot_outcome[is.na(events$shot_outcome)] <- 0
#Duplicated just in case
dupe_events <- events
dupe_events2 <- dupe_events
events$Long_range <- NULL
# Verify the changes
str(events)
# Loading the events.csv file
events <- read.csv("events.csv")
# Loading the ginf.csv file
ginf<- read.csv("ginf.csv")
str(events)
gc()
gc()
gc()
# Loading the events.csv file
events <- read.csv("events.csv")
# Loading the ginf.csv file
ginf<- read.csv("ginf.csv")
str(events)
